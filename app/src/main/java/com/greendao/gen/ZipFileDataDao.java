package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.greendao.gen.bean.ZipFileData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZIP_FILE_DATA".
*/
public class ZipFileDataDao extends AbstractDao<ZipFileData, Long> {

    public static final String TABLENAME = "ZIP_FILE_DATA";

    /**
     * Properties of entity ZipFileData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FileName = new Property(1, String.class, "fileName", false, "FILE_NAME");
        public final static Property Moudle = new Property(2, String.class, "moudle", false, "MOUDLE");
        public final static Property Version = new Property(3, String.class, "version", false, "VERSION");
        public final static Property FileSize = new Property(4, double.class, "fileSize", false, "FILE_SIZE");
        public final static Property ZipName = new Property(5, String.class, "zipName", false, "ZIP_NAME");
    }


    public ZipFileDataDao(DaoConfig config) {
        super(config);
    }
    
    public ZipFileDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZIP_FILE_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FILE_NAME\" TEXT NOT NULL ," + // 1: fileName
                "\"MOUDLE\" TEXT," + // 2: moudle
                "\"VERSION\" TEXT," + // 3: version
                "\"FILE_SIZE\" REAL NOT NULL ," + // 4: fileSize
                "\"ZIP_NAME\" TEXT);"); // 5: zipName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZIP_FILE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZipFileData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFileName());
 
        String moudle = entity.getMoudle();
        if (moudle != null) {
            stmt.bindString(3, moudle);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(4, version);
        }
        stmt.bindDouble(5, entity.getFileSize());
 
        String zipName = entity.getZipName();
        if (zipName != null) {
            stmt.bindString(6, zipName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZipFileData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFileName());
 
        String moudle = entity.getMoudle();
        if (moudle != null) {
            stmt.bindString(3, moudle);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(4, version);
        }
        stmt.bindDouble(5, entity.getFileSize());
 
        String zipName = entity.getZipName();
        if (zipName != null) {
            stmt.bindString(6, zipName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ZipFileData readEntity(Cursor cursor, int offset) {
        ZipFileData entity = new ZipFileData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // fileName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // moudle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // version
            cursor.getDouble(offset + 4), // fileSize
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // zipName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZipFileData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFileName(cursor.getString(offset + 1));
        entity.setMoudle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVersion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileSize(cursor.getDouble(offset + 4));
        entity.setZipName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ZipFileData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ZipFileData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ZipFileData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
